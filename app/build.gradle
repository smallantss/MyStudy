apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.9.3'
        classpath 'org.aspectj:aspectjweaver:1.8.9'
    }
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.mystudy"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
//        ndk {
//            moduleName "ndktest-jni"
//            abiFilters "armeabi-v7a", "x86"
//        }

        javaCompileOptions {

            // 显式声明支持注解
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }


    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
//        externalNativeBuild {
//            ndkBuild {
//                path 'src/main/jni/Android.mk'
//            }
//        }
//        sourceSets.main {
//            jni.srcDirs = []
//            jniLibs.srcDirs = ['src/main/jniLibs']
//        }
    }
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //    implementation project(':dnbus')
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.8'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    def paging_version = "2.1.0"
    def lifecycle_version = "2.0.0"
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    // For Kotlin use paging-runtime-ktx
    implementation "androidx.paging:paging-runtime:$paging_version"
    // alternatively - without Android dependencies for testing  For Kotlin use paging-common-ktx
    testImplementation "androidx.paging:paging-common:$paging_version"
    def nav_version = "2.0.0"
    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    def work_version = "2.2.0"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation 'org.aspectj:aspectjrt:1.8.9'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation files('libs/fmod.jar')
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.alibaba:fastjson:1.2.62'
    annotationProcessor project(path: ':butterknife_compiler')
    implementation project(path: ':butterknife_annotations')
    implementation project(path: ':butterknife')
    implementation 'com.github.jokermonn:permissions4m:2.1.2-lib'
    annotationProcessor 'com.github.jokermonn:permissions4m:2.1.2-processor'
//    implementation 'com.ysbing:ypermission:1.1.0'
}

//configurations {
//    //这里要排除到这个包，这个包会与 com.google.guava 冲突，导致编译不过
//    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
//}

repositories {
    mavenCentral()
}

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
